using System.Collections.Generic;
using System.IO;
using UnityEngine;
using Newtonsoft.Json;

namespace MaxSpecialModifiers
{
	/// <summary>
	/// Configuration for selecting which implicit affixes are available for each tag type
	/// </summary>
	public class ModConfig
	{
		/// <summary>
		/// Enable debug logging for forced affixes
		/// </summary>
		public bool DebugLogging { get; set; } = false;

		/// <summary>
		/// Indicates if the configuration was loaded successfully or if we're using fallback behavior
		/// </summary>
		public bool IsConfigurationValid { get; set; } = true;

		private static void DebugLog(string message)
		{
			if (ModLoader.Config?.DebugLogging == true)
			{
				// Debug.Log($"[MaxSpecialModifiers] {message}");
			}
		}

		/// <summary>
		/// Configuration for Keropok forced affixes
		/// </summary>
		public Dictionary<string, bool> Keropok { get; set; } = new Dictionary<string, bool>
		{
			// Using exact names from CSV Column 1 (Item Affix Name)
			["Keropok Increased buff effect"] = true,
			["Keropok Increased buff duration"] = true,
			["Keropok HP Regen"] = true,
			["Keropok Damage Reflection"] = true,
			["Keropok Elemental Resistance"] = true,
			["Keropok Class Passives Multiplier"] = true,
			["Keropok HP Steal"] = true,
			["Keropok MP Steal"] = true,
			["Keropok Crisis Threshold"] = true,
			["Keropok Crisis Absorb"] = true,
			["Keropok Max HP"] = true,
			["Keropok Cold Chance Defense"] = true,
			["Keropok Movement Speed"] = true
		};

		/// <summary>
		/// Configuration for Orang Bunian forced affixes
		/// </summary>
		public Dictionary<string, bool> OrangBunian { get; set; } = new Dictionary<string, bool>
		{
			// Using exact names from CSV Column 1 (Item Affix Name)
			["Additional Minions"] = true,
			["Minion Max HP"] = true,
			["HP Multiplier"] = true,
			["Max Skill Uses"] = true,
			["Increased Movement Speed"] = true,
			["Elemental Chance"] = true,
			["Absorb"] = true,
			["Increased Projectile Radius"] = true,
			["Basic attack as fire"] = true,
			["Basic attack as ice"] = true,
			["Fire penetration"] = true,
			["Ice penetration"] = true,
			["Blind on hit"] = true,
			["Slow on hit"] = true,
			["Fire Resistance Cap"] = true,
			["Ice Resistance Cap"] = true,
			["More basic attack damage longer cooldown"] = true,
			["Class Passives Multiplier"] = true,
			["Faster cooldown less cast speed"] = true,
			["Triggered skills reduced cooldown and damage multiplier"] = true,
			["Triggered skills increased damage"] = true,
			["Crisis Damage"] = true,
			["Blessed Minion Movement Speed"] = true
		};

		/// <summary>
		/// Configuration for Awakened forced affixes
		/// </summary>
		public Dictionary<string, bool> Awakened { get; set; } = new Dictionary<string, bool>
		{
			// Using exact names from CSV Column 1 (Item Affix Name) - only the ones that actually exist in game
			["Minion Avoidance"] = true,
			["Basic attack as lightning"] = true,
			["Basic attack as poison"] = true,
			["Lightning penetration"] = true,
			["Poison penetration"] = true,
			["Frenzy on hit"] = true,
			["Agility on hit"] = true,
			["Lightning Resistance Cap"] = true,
			["Poison Resistance Cap"] = true,
			["Faster cooldown less skill damage"] = true,
			["Faster cooldown less critical multiplier"] = true,
			["Crisis threshhold"] = true, // Note: typo in CSV - "threshhold" not "threshold"
			["Triggered skills reduced cooldown and slower cast speed"] = true,
			["Triggered skills cast speed"] = true,
			["Crisis Absorb"] = true,
			["Movement Skill Distance Multiplier"] = true
		};


		/// <summary>
		/// Saves the configuration to JSON file
		/// </summary>
		public void SaveToFile(string filePath)
		{
			try
			{
				string json = JsonConvert.SerializeObject(this, Formatting.Indented);
				File.WriteAllText(filePath, json);
				DebugLog($"Configuration saved to {filePath}");
			}
			catch (System.Exception ex)
			{
				// Debug.LogError($"[MaxSpecialModifiers] Error saving configuration: {ex.Message}");
			}
		}

		/// <summary>
		/// Loads configuration from JSON file, creates default if not found
		/// </summary>
		public static ModConfig LoadFromFile(string filePath)
		{
			try
			{
				if (File.Exists(filePath))
				{
					string json = File.ReadAllText(filePath);
					var config = JsonConvert.DeserializeObject<ModConfig>(json);
					config.IsConfigurationValid = true;
					DebugLog($"Configuration loaded from {filePath}");
					return config;
				}
				else
				{
					DebugLog($"Configuration file not found, creating default at {filePath}");
					var defaultConfig = new ModConfig();
					defaultConfig.IsConfigurationValid = true;
					defaultConfig.SaveToFile(filePath);
					return defaultConfig;
				}
			}
			catch (System.Exception ex)
			{
				// Debug.LogError($"[MaxSpecialModifiers] Error loading configuration: {ex.Message}");
				// Debug.LogError($"[MaxSpecialModifiers] Using fallback configuration - mod will use original game behavior");
				var fallbackConfig = new ModConfig();
				fallbackConfig.IsConfigurationValid = false;
				return fallbackConfig;
			}
		}
	}
}